{
  "title": "Remote Pair Programming",
  "story": [
    {
      "type": "paragraph",
      "id": "9e1e2a88080399b1",
      "text": "Software development can greatly benefit from both collaborative and remote work, but combining the two ideas is something that is surprisingly hard to do well.  [https://github.com/m-n m-n] and I have a workable solution going with [http://tmux.sourceforge.net/ Tmux] and [http://mumble.sourceforge.net/ Mumble] hosted on a cloud vps and Google chat to share links/take notes on the side."
    },
    {
      "type": "paragraph",
      "id": "1a1e5a18aea1333b",
      "text": "Mumble is a low latency open source VoIP program, aimed at gaming. Set it to open the mic on voice detection rather than a key press to encourage constant communication. Skype, google hangout, or even a phone call would work passably.  As long as it is a clear channel and you've got comfortable headsets.  Google chat could be substituted for just about anything as well, if wave was finished it could be very good, campfire seems to be a good solution also."
    },
    {
      "type": "paragraph",
      "id": "94c94fb270bda246",
      "text": "The heart of the matter is the terminal multiplexer Tmux, a bsd licensed, modern, and actively developed descendant of the classic gnu screen.  The key feature difference for our application is that navigation is tied together for everyone attached to the same tmux instance.  Using Screen we had to tell each other which window we were swapping to, every time we swapped."
    },
    {
      "type": "paragraph",
      "id": "3380f0af9998d81a",
      "text": "There are tons of setup and configuration options with tmux, it is definitely not a painless turn key solution.  Checkout the [https://wiki.archlinux.org/index.php/Tmux ArchWiki Tmux page] to get started, and don't forget to change the control character to something reasonable, like ctrl-a."
    },
    {
      "type": "paragraph",
      "id": "191460322f7e7460",
      "text": "Tmux sessions can be shared over a socket, created with <code>tmux -S /path/to/socket</code>, as long as all participants have full permissions on the socket they can join with <code>tmux -S /path/to/socket attach</code>.  You can then use standard unix permissions and groups to control who can attach to what tmux sessions, if you have multiple pairs using the same server to develop on."
    },
    {
      "type": "paragraph",
      "id": "6d9ff285f741b7de",
      "text": "The way to come and go from a Tmux or Screen instance is to detach and reattach. When you detach, it doesn't change anything within that Tmux or Screen instance -- everything is as you left it when you later reattach. Thus if you create a new tmux session for each completely separate purpose, then your development environment is always the same as when you left it.  No need to open files and windows again, you're cursor is still just sitting at the same spot when you get back. This is incredibly empowering, especially since you can do this between devices.  "
    },
    {
      "type": "paragraph",
      "id": "d40e9146ef096fd9",
      "text": "The biggest thing this setup is lacking seems to be a shared browser.  I usually have the shared tmux session full screen on my monitor, but the laptop screen is always there with a browser in it also.  While we are checking things out in our own browsers we have to describe what we are seeing back and forth, which is a speed bump we haven't figured out how to overcome yet."
    }
  ],
  "journal": [
    {
      "type": "create",
      "id": "2fe9ef243ef8834c",
      "item": {
        "title": "Remote Pair Programming"
      }
    },
    {
      "item": {
        "type": "factory",
        "id": "9e1e2a88080399b1"
      },
      "id": "9e1e2a88080399b1",
      "type": "add"
    },
    {
      "type": "edit",
      "id": "9e1e2a88080399b1",
      "item": {
        "type": "paragraph",
        "id": "9e1e2a88080399b1",
        "text": "Software development can greatly benefit from both collaborative and remote work, but combining the two ideas is something that is surprisingly hard to do well.  I don't have a complete solution, but the combination of Tmux, Mumble, and some form of text chat seems to get most of the way there."
      }
    },
    {
      "item": {
        "type": "factory",
        "id": "94c94fb270bda246"
      },
      "id": "94c94fb270bda246",
      "type": "add",
      "after": "9e1e2a88080399b1"
    },
    {
      "type": "edit",
      "id": "94c94fb270bda246",
      "item": {
        "type": "paragraph",
        "id": "94c94fb270bda246",
        "text": "The solution I've been working on with [https://github.com/m-n @m-n] is based around the terminal multiplexer Tmux, a bsd licensed, modern, and actively developed descendant of the classic gnu screen."
      }
    },
    {
      "type": "edit",
      "id": "9e1e2a88080399b1",
      "item": {
        "type": "paragraph",
        "id": "9e1e2a88080399b1",
        "text": "Software development can greatly benefit from both collaborative and remote work, but combining the two ideas is something that is surprisingly hard to do well.  I don't have a complete solution, but the combination of [http://tmux.sourceforge.net/ Tmux], [http://mumble.sourceforge.net/ Mumble], and some form of text chat seems to get most of the way there."
      }
    },
    {
      "type": "edit",
      "id": "94c94fb270bda246",
      "item": {
        "type": "paragraph",
        "id": "94c94fb270bda246",
        "text": "It is based around the terminal multiplexer Tmux, a bsd licensed, modern, and actively developed descendant of the classic gnu screen.  The key feature difference for our application is that navigation is tied together for everyone attached to the same tmux instance.  So where you would navigate between windows in screen and have to explain what window you are looking at and how your partner can find it, in tmux that isn't an issue."
      }
    },
    {
      "item": {
        "type": "factory",
        "id": "3380f0af9998d81a"
      },
      "id": "3380f0af9998d81a",
      "type": "add",
      "after": "94c94fb270bda246"
    },
    {
      "type": "edit",
      "id": "3380f0af9998d81a",
      "item": {
        "type": "paragraph",
        "id": "3380f0af9998d81a",
        "text": "There is a ton of setup and options with tmux, but I'm only going to outline the most important parts for pair programming.  Checkout ArchWiki Tmux for more general information."
      }
    },
    {
      "type": "edit",
      "id": "3380f0af9998d81a",
      "item": {
        "type": "paragraph",
        "id": "3380f0af9998d81a",
        "text": "There are tons of setup and configuration options with tmux, but I'm only going to outline the most important parts for pair programming.  Checkout the [https://wiki.archlinux.org/index.php/Tmux ArchWiki Tmux] page for more general information."
      }
    },
    {
      "type": "edit",
      "id": "9e1e2a88080399b1",
      "item": {
        "type": "paragraph",
        "id": "9e1e2a88080399b1",
        "text": "Software development can greatly benefit from both collaborative and remote work, but combining the two ideas is something that is surprisingly hard to do well.  I've been working with [https://github.com/m-n m-n] on a workable solution using,  [http://tmux.sourceforge.net/ Tmux], [http://mumble.sourceforge.net/ Mumble], and Google chat."
      }
    },
    {
      "item": {
        "type": "factory",
        "id": "1a1e5a18aea1333b"
      },
      "id": "1a1e5a18aea1333b",
      "type": "add",
      "after": "3380f0af9998d81a"
    },
    {
      "type": "edit",
      "id": "1a1e5a18aea1333b",
      "item": {
        "type": "paragraph",
        "id": "1a1e5a18aea1333b",
        "text": "Mumble is a low latency open source VoIP program, aimed at gaming.  Set it to activate with voice detection and it's ideal for pair programming, however skype, google hangout, or even a phone call would work passably.  As long as it is a clear channel and you've got comfortable headsets.  Google chat could be substituted for just about anything as well, if wave was finished it could be very good, campfire seems to be a good solution also."
      }
    },
    {
      "type": "move",
      "order": [
        "9e1e2a88080399b1",
        "1a1e5a18aea1333b",
        "94c94fb270bda246",
        "3380f0af9998d81a"
      ],
      "id": "1a1e5a18aea1333b"
    },
    {
      "type": "edit",
      "id": "94c94fb270bda246",
      "item": {
        "type": "paragraph",
        "id": "94c94fb270bda246",
        "text": "The heart of the matter is the terminal multiplexer Tmux, a bsd licensed, modern, and actively developed descendant of the classic gnu screen.  The key feature difference for our application is that navigation is tied together for everyone attached to the same tmux instance.  So where you would navigate between windows in screen and have to explain what window you are looking at and how your partner can find it, in tmux that isn't an issue."
      }
    },
    {
      "type": "edit",
      "id": "9e1e2a88080399b1",
      "item": {
        "type": "paragraph",
        "id": "9e1e2a88080399b1",
        "text": "Software development can greatly benefit from both collaborative and remote work, but combining the two ideas is something that is surprisingly hard to do well.  [https://github.com/m-n m-n] and I have a workable solution going with [http://tmux.sourceforge.net/ Tmux], [http://mumble.sourceforge.net/ Mumble], and Google chat."
      }
    },
    {
      "item": {
        "type": "factory",
        "id": "191460322f7e7460"
      },
      "id": "191460322f7e7460",
      "type": "add",
      "after": "3380f0af9998d81a"
    },
    {
      "type": "edit",
      "id": "191460322f7e7460",
      "item": {
        "type": "paragraph",
        "id": "191460322f7e7460",
        "text": "Tmux sessions can be shared over a socket, created with tmux -S /path/to/socket, as long as all participants have full permissions on the socket they can join with tmux -S /path/to/socket attach.  You can then use standard unix permissions and groups to control who can attach to what tmux sessions, if you have multiple pairs using the same server to develop on."
      }
    },
    {
      "item": {
        "type": "factory",
        "id": "6d9ff285f741b7de"
      },
      "id": "6d9ff285f741b7de",
      "type": "add",
      "after": "191460322f7e7460"
    },
    {
      "type": "edit",
      "id": "6d9ff285f741b7de",
      "item": {
        "type": "paragraph",
        "id": "6d9ff285f741b7de",
        "text": "Create a new tmux session for each completely separate purpose, and then when you leave and return to a task your development environment is always the same as when you left it.  No need to open files and windows again, you're cursor is still just sitting at the same spot when you get back.  This is incredibly empowering, especially since you can do this between devices.  "
      }
    },
    {
      "type": "edit",
      "id": "191460322f7e7460",
      "item": {
        "type": "paragraph",
        "id": "191460322f7e7460",
        "text": "Tmux sessions can be shared over a socket, created with <code>tmux -S /path/to/socket</code>, as long as all participants have full permissions on the socket they can join with <code>tmux -S /path/to/socket attach</code>.  You can then use standard unix permissions and groups to control who can attach to what tmux sessions, if you have multiple pairs using the same server to develop on."
      }
    },
    {
      "type": "edit",
      "id": "3380f0af9998d81a",
      "item": {
        "type": "paragraph",
        "id": "3380f0af9998d81a",
        "text": "There are tons of setup and configuration options with tmux, it is definitely not a painless turn key solution.  Checkout the [https://wiki.archlinux.org/index.php/Tmux ArchWiki Tmux] to get started, and don't forget to change the control character to something reasonable, like ctrl-a."
      }
    },
    {
      "type": "edit",
      "id": "9e1e2a88080399b1",
      "item": {
        "type": "paragraph",
        "id": "9e1e2a88080399b1",
        "text": "Software development can greatly benefit from both collaborative and remote work, but combining the two ideas is something that is surprisingly hard to do well.  [https://github.com/m-n m-n] and I have a workable solution going with [http://tmux.sourceforge.net/ Tmux] and [http://mumble.sourceforge.net/ Mumble] hosted on a cloud vps and Google chat to share links/take notes on the side."
      }
    },
    {
      "item": {
        "type": "factory",
        "id": "d40e9146ef096fd9"
      },
      "id": "d40e9146ef096fd9",
      "type": "add",
      "after": "6d9ff285f741b7de"
    },
    {
      "type": "edit",
      "id": "d40e9146ef096fd9",
      "item": {
        "type": "paragraph",
        "id": "d40e9146ef096fd9",
        "text": "The biggest thing this setup is lacking seems to be a shared browser.  I usually have the shared tmux session full screen on my monitor, but the laptop screen is always there with a browser in it also.  While we are checking things out in our own browsers we have to describe what we are seeing back and forth, which is a speed bump we haven't figured out how to overcome yet."
      }
    },
    {
      "item": {
        "type": "factory",
        "id": "7ab09dcdfe64379b"
      },
      "id": "7ab09dcdfe64379b",
      "type": "add",
      "after": "d40e9146ef096fd9"
    },
    {
      "type": "remove",
      "id": "7ab09dcdfe64379b"
    },
    {
      "type": "edit",
      "id": "1a1e5a18aea1333b",
      "item": {
        "type": "paragraph",
        "id": "1a1e5a18aea1333b",
        "text": "Mumble is a low latency open source VoIP program, aimed at gaming. Set it to open the mic on voice detection rather than a key press to encourage constant communication. Skype, google hangout, or even a phone call would work passably.  As long as it is a clear channel and you've got comfortable headsets.  Google chat could be substituted for just about anything as well, if wave was finished it could be very good, campfire seems to be a good solution also."
      },
      "fork": "nrn.io"
    },
    {
      "type": "edit",
      "id": "94c94fb270bda246",
      "item": {
        "type": "paragraph",
        "id": "94c94fb270bda246",
        "text": "The heart of the matter is the terminal multiplexer Tmux, a bsd licensed, modern, and actively developed descendant of the classic gnu screen.  The key feature difference for our application is that navigation is tied together for everyone attached to the same tmux instance.  Using Screen we had to tell each other which window we were swapping to, every time we swapped."
      }
    },
    {
      "type": "edit",
      "id": "3380f0af9998d81a",
      "item": {
        "type": "paragraph",
        "id": "3380f0af9998d81a",
        "text": "There are tons of setup and configuration options with tmux, it is definitely not a painless turn key solution.  Checkout the [https://wiki.archlinux.org/index.php/Tmux ArchWiki Tmux page] to get started, and don't forget to change the control character to something reasonable, like ctrl-a."
      }
    },
    {
      "type": "edit",
      "id": "6d9ff285f741b7de",
      "item": {
        "type": "paragraph",
        "id": "6d9ff285f741b7de",
        "text": "The way to come and go from a Tmux or Screen instance is to detach from it. When you detach, it doesn't change anything within that Tmux or Screen instance -- everything is as you left it when you later reattach. Create a new tmux session for each completely separate purpose, and your development environment is always the same as when you left it.  No need to open files and windows again, you're cursor is still just sitting at the same spot when you get back. This is incredibly empowering, especially since you can do this between devices.  "
      }
    },
    {
      "type": "edit",
      "id": "6d9ff285f741b7de",
      "item": {
        "type": "paragraph",
        "id": "6d9ff285f741b7de",
        "text": "The way to come and go from a Tmux or Screen instance is to detach and reattach. When you detach, it doesn't change anything within that Tmux or Screen instance -- everything is as you left it when you later reattach. Create a new tmux session for each completely separate purpose, and your development environment is always the same as when you left it.  No need to open files and windows again, you're cursor is still just sitting at the same spot when you get back. This is incredibly empowering, especially since you can do this between devices.  "
      }
    },
    {
      "type": "edit",
      "id": "6d9ff285f741b7de",
      "item": {
        "type": "paragraph",
        "id": "6d9ff285f741b7de",
        "text": "The way to come and go from a Tmux or Screen instance is to detach and reattach. When you detach, it doesn't change anything within that Tmux or Screen instance -- everything is as you left it when you later reattach. Thus if you create a new tmux session for each completely separate purpose, then your development environment is always the same as when you left it.  No need to open files and windows again, you're cursor is still just sitting at the same spot when you get back. This is incredibly empowering, especially since you can do this between devices.  "
      },
      "fork": "matt.articlesoffederation.com"
    }
  ]
}